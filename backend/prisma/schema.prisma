// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  VIEWER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  models   Model[]
  geojsons GeoJson[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  parentId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Self-relation for hierarchy
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relations
  models   Model[]
  geojsons GeoJson[]

  @@map("categories")
}

model Model {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  url         String  // File path trong organized structure
  fileSize    Int?
  mimeType    String?

  // Spatial positioning
  longitude Float
  latitude  Float
  height    Float @default(0)
  scale     Float @default(1.0)
  heading   Float @default(0)
  pitch     Float @default(0)
  roll      Float @default(0)

  // Metadata
  category String?
  tags     String[]
  isPublic Boolean @default(true)
  active   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId Int?
  categoryRel Category? @relation(fields: [categoryId], references: [id])

  @@map("models")
}

model GeoJson {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  data        Json    // GeoJSON content as JSONB
  category    String?
  tags        String[]
  isPublic    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId Int?
  categoryRel Category? @relation(fields: [categoryId], references: [id])

  @@map("geojsons")
}

model Configuration {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  category    String   @default("general")
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("configurations")
}